{"version":3,"sources":["index.tsx"],"names":["NativeModules","AddPaymentPassStatus","PaymentPass"],"mappings":"AAAA,SAASA,aAAT,QAA8B,cAA9B;AAEA,WAAYC,oBAAZ;;WAAYA,oB;AAAAA,EAAAA,oB;AAAAA,EAAAA,oB;AAAAA,EAAAA,oB;GAAAA,oB,KAAAA,oB;;AAyCZ,MAAM;AAAEC,EAAAA;AAAF,IAAkBF,aAAxB;AAEA,eAAeE,WAAf","sourcesContent":["import { NativeModules } from 'react-native';\n\nexport enum AddPaymentPassStatus {\n  CAN_ADD = 'CAN_ADD',\n  ALREADY_ADDED = 'ALREADY_ADDED',\n  BLOCKED = 'BLOCKED',\n}\n\nexport interface DigitalWalletProvisionRequestParams {\n  device_type: string;\n  certificates: string[];\n  nonce: string;\n  nonce_signature: string;\n  app_version: string;\n}\n\ntype CanAddPaymentPass = (\n  paymentRefrenceId: string\n) => Promise<AddPaymentPassStatus>;\n\ntype AddPaymentPass = (\n  cardHolderName: string,\n  lastFour: string,\n  paymentReferenceId: string,\n  errorCallback: () => void,\n  successCallback: (params: DigitalWalletProvisionRequestParams) => void\n) => Promise<void>;\n\ntype FinalizeAddCard = (\n  encryptedPassData: string,\n  activationData: string,\n  ephemeralPublicKey: string\n) => Promise<void>;\n\ntype RemoveSuspendedCard = (paymentReferenceId: string) => Promise<void>;\n\ntype PaymentPassType = {\n  canAddPaymentPass: CanAddPaymentPass;\n  addPaymentPass: AddPaymentPass;\n  finalizeAddCard: FinalizeAddCard;\n  removeSuspendedCard: RemoveSuspendedCard;\n};\n\nconst { PaymentPass } = NativeModules;\n\nexport default PaymentPass as PaymentPassType;\n"]}